{"version":3,"file":"nivo-geo.cjs.js","sources":["../src/hooks.js","../src/ChoroplethTooltip.js","../src/props.js","../src/GeoGraticule.js","../src/GeoMapFeature.js","../src/GeoMap.js","../src/GeoMapCanvas.js","../src/Choropleth.js","../src/ChoroplethCanvas.js","../src/ResponsiveChoropleth.js","../src/ResponsiveChoroplethCanvas.js","../src/ResponsiveGeoMap.js","../src/ResponsiveGeoMapCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport { isFunction, get } from 'lodash'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * projectionTranslation[0], height * projectionTranslation[1]])\n            .rotate(projectionRotation)\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation[0],\n        projectionTranslation[1],\n        projectionRotation[0],\n        projectionRotation[1],\n        projectionRotation[2],\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule())\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(\n        () => (isFunction(label) ? label : datum => get(datum, label)),\n        [label]\n    )\n    const getValue = useMemo(\n        () => (isFunction(value) ? value : datum => get(datum, value)),\n        [value]\n    )\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain(domain),\n        [colors, domain]\n    )\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nChoroplethTooltip.propTypes = {\n    feature: PropTypes.object.isRequired,\n}\n\nChoroplethTooltip.displayName = 'ChoroplethTooltip'\n\nexport default ChoroplethTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { projectionById } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonPropTypes = {\n    features: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            type: PropTypes.oneOf(['Feature']).isRequired,\n            properties: PropTypes.object,\n            geometry: PropTypes.object.isRequired,\n        })\n    ).isRequired,\n\n    projectionType: PropTypes.oneOf(Object.keys(projectionById)).isRequired,\n    projectionScale: PropTypes.number.isRequired,\n    projectionTranslation: PropTypes.arrayOf(PropTypes.number).isRequired,\n    projectionRotation: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    enableGraticule: PropTypes.bool.isRequired,\n    graticuleLineWidth: PropTypes.number.isRequired,\n    graticuleLineColor: PropTypes.string.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltip: PropTypes.any,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const GeoMapPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const GeoMapCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonChoroplethPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    match: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    colors: quantizeColorScalePropType.isRequired,\n    domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n    unknownColor: PropTypes.string.isRequired,\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features', 'legends']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const ChoroplethPropTypes = {\n    ...GeoMapPropTypes,\n    ...commonChoroplethPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChoroplethCanvasPropTypes = {\n    ...GeoMapCanvasPropTypes,\n    ...commonChoroplethPropTypes,\n}\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onMouseMove: () => {},\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nGeoGraticule.propTypes = {\n    path: PropTypes.func.isRequired,\n    graticule: PropTypes.func.isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineColor: PropTypes.string.isRequired,\n}\n\nGeoGraticule.displayName = 'GeoGraticule'\n\nexport default GeoGraticule\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nGeoMapFeature.propTypes = {\n    feature: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.oneOf(['Feature']).isRequired,\n        properties: PropTypes.object,\n        geometry: PropTypes.object.isRequired,\n    }).isRequired,\n    path: PropTypes.func.isRequired,\n\n    fillColor: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nGeoMapFeature.displayName = 'GeoMapFeature'\n\nexport default GeoMapFeature\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapPropTypes, GeoMapDefaultProps } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        isInteractive,\n        onClick,\n        tooltip: Tooltip,\n        role,\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nGeoMap.displayName = 'GeoMap'\nGeoMap.propTypes = GeoMapPropTypes\nGeoMap.defaultProps = GeoMapDefaultProps\n\nexport default withContainer(GeoMap)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapCanvasDefaultProps, GeoMapCanvasPropTypes } from './props'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n        features,\n        layers,\n\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n\n        fillColor,\n        borderWidth,\n        borderColor,\n\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n\n        isInteractive,\n        onClick,\n        onMouseMove,\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nGeoMapCanvas.displatName = 'GeoMapCanvas'\nGeoMapCanvas.propTypes = GeoMapCanvasPropTypes\nGeoMapCanvas.defaultProps = GeoMapCanvasDefaultProps\n\nexport default withContainer(GeoMapCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethPropTypes, ChoroplethDefaultProps } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\n\nconst Choropleth = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        colors,\n        domain,\n        unknownColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        layers,\n        legends,\n        isInteractive,\n        onClick,\n        tooltip: Tooltip,\n        role,\n    }) => {\n        const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n        const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor: () => {},\n            borderWidth,\n            borderColor,\n        })\n        const { getFillColor, boundFeatures, legendData } = useChoropleth({\n            features,\n            data,\n            match,\n            label,\n            value,\n            valueFormat,\n            colors,\n            unknownColor,\n            domain,\n        })\n\n        const theme = useTheme()\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const handleClick = useCallback(\n            (feature, event) => isInteractive && onClick && onClick(feature, event),\n            [isInteractive, onClick]\n        )\n        const handleMouseEnter = useCallback(\n            (feature, event) =>\n                isInteractive &&\n                Tooltip &&\n                showTooltipFromEvent(<Tooltip feature={feature} />, event),\n            [isInteractive, showTooltipFromEvent, Tooltip]\n        )\n        const handleMouseMove = useCallback(\n            (feature, event) =>\n                isInteractive &&\n                Tooltip &&\n                showTooltipFromEvent(<Tooltip feature={feature} />, event),\n            [isInteractive, showTooltipFromEvent, Tooltip]\n        )\n        const handleMouseLeave = useCallback(\n            () => isInteractive && hideTooltip(),\n            [isInteractive, hideTooltip]\n        )\n\n        return (\n            <SvgWrapper\n                width={outerWidth}\n                height={outerHeight}\n                margin={margin}\n                theme={theme}\n                role={role}\n            >\n                {layers.map((layer, i) => {\n                    if (layer === 'graticule') {\n                        if (enableGraticule !== true) return null\n\n                        return (\n                            <GeoGraticule\n                                key=\"graticule\"\n                                path={path}\n                                graticule={graticule}\n                                lineWidth={graticuleLineWidth}\n                                lineColor={graticuleLineColor}\n                            />\n                        )\n                    }\n                    if (layer === 'features') {\n                        return (\n                            <Fragment key=\"features\">\n                                {boundFeatures.map(feature => (\n                                    <GeoMapFeature\n                                        key={feature.id}\n                                        feature={feature}\n                                        path={path}\n                                        fillColor={getFillColor(feature)}\n                                        borderWidth={getBorderWidth(feature)}\n                                        borderColor={getBorderColor(feature)}\n                                        onMouseEnter={handleMouseEnter}\n                                        onMouseMove={handleMouseMove}\n                                        onMouseLeave={handleMouseLeave}\n                                        onClick={handleClick}\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    }\n                    if (layer === 'legends') {\n                        return legends.map((legend, i) => {\n                            return (\n                                <BoxLegendSvg\n                                    key={i}\n                                    containerWidth={width}\n                                    containerHeight={height}\n                                    data={legendData}\n                                    {...legend}\n                                />\n                            )\n                        })\n                    }\n\n                    return <Fragment key={i}>{layer({})}</Fragment>\n                })}\n            </SvgWrapper>\n        )\n    }\n)\n\nChoropleth.displayName = 'Choropleth'\nChoropleth.propTypes = ChoroplethPropTypes\nChoropleth.defaultProps = ChoroplethDefaultProps\n\nexport default withContainer(Choropleth)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethCanvasDefaultProps, ChoroplethCanvasPropTypes } from './props'\nimport { useGeoMap, useChoropleth } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        colors,\n        domain,\n        unknownColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        layers,\n        legends,\n        isInteractive,\n        onClick,\n        onMouseMove,\n        tooltip: Tooltip,\n    }) => {\n        const canvasEl = useRef(null)\n        const theme = useTheme()\n        const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n        const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor: () => {},\n            borderWidth,\n            borderColor,\n        })\n        const { getFillColor, boundFeatures, legendData } = useChoropleth({\n            features,\n            data,\n            match,\n            label,\n            value,\n            valueFormat,\n            colors,\n            unknownColor,\n            domain,\n        })\n\n        useEffect(() => {\n            if (!canvasEl) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            path.context(ctx)\n\n            layers.forEach(layer => {\n                if (layer === 'graticule') {\n                    if (enableGraticule === true) {\n                        ctx.lineWidth = graticuleLineWidth\n                        ctx.strokeStyle = graticuleLineColor\n                        ctx.beginPath()\n                        path(graticule())\n                        ctx.stroke()\n                    }\n                } else if (layer === 'features') {\n                    boundFeatures.forEach(feature => {\n                        ctx.beginPath()\n                        path(feature)\n                        ctx.fillStyle = getFillColor(feature)\n                        ctx.fill()\n\n                        const borderWidth = getBorderWidth(feature)\n                        if (borderWidth > 0) {\n                            ctx.strokeStyle = getBorderColor(feature)\n                            ctx.lineWidth = borderWidth\n                            ctx.stroke()\n                        }\n                    })\n                } else if (layer === 'legends') {\n                    legends.forEach(legend => {\n                        renderLegendToCanvas(ctx, {\n                            ...legend,\n                            data: legendData,\n                            containerWidth: width,\n                            containerHeight: height,\n                            theme,\n                        })\n                    })\n                } else {\n                    // layer(ctx, {})\n                }\n            })\n        }, [\n            canvasEl,\n            outerWidth,\n            outerHeight,\n            margin,\n            pixelRatio,\n            theme,\n            path,\n            graticule,\n            getFillColor,\n            getBorderWidth,\n            getBorderColor,\n            boundFeatures,\n            legends,\n            layers,\n        ])\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const handleMouseMove = useCallback(\n            event => {\n                if (!isInteractive || !Tooltip) return\n\n                const feature = getFeatureFromMouseEvent(\n                    event,\n                    canvasEl.current,\n                    boundFeatures,\n                    projection\n                )\n                if (feature) {\n                    showTooltipFromEvent(<Tooltip feature={feature} />, event)\n                } else {\n                    hideTooltip()\n                }\n                onMouseMove && onMouseMove(feature || null, event)\n            },\n            [\n                showTooltipFromEvent,\n                hideTooltip,\n                isInteractive,\n                Tooltip,\n                canvasEl,\n                boundFeatures,\n                projection,\n            ]\n        )\n        const handleMouseLeave = useCallback(\n            () => isInteractive && hideTooltip(),\n            [isInteractive, hideTooltip]\n        )\n        const handleClick = useCallback(\n            event => {\n                if (!isInteractive || !onClick) return\n\n                const feature = getFeatureFromMouseEvent(\n                    event,\n                    canvasEl.current,\n                    boundFeatures,\n                    projection\n                )\n                if (feature) {\n                    onClick(feature, event)\n                }\n            },\n            [isInteractive, canvasEl, boundFeatures, projection, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                    cursor: isInteractive ? 'auto' : 'normal',\n                }}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChoroplethCanvas.displayName = 'ChoroplethCanvas'\nChoroplethCanvas.propTypes = ChoroplethCanvasPropTypes\nChoroplethCanvas.defaultProps = ChoroplethCanvasDefaultProps\n\nexport default withContainer(ChoroplethCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n"],"names":["projectionById","azimuthalEqualArea","geoAzimuthalEqualArea","azimuthalEquidistant","geoAzimuthalEquidistant","gnomonic","geoGnomonic","orthographic","geoOrthographic","stereographic","geoStereographic","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","mercator","geoMercator","transverseMercator","geoTransverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","fillColor","borderWidth","borderColor","projection","useMemo","scale","translate","rotate","path","geoPath","graticule","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","_isFunction","feature","datum","featureKey","_get","datumKey","getLabel","getValue","valueFormatter","undefined","d","format","colorScale","guessQuantizeColorScale","boundFeatures","map","find","datumValue","featureWithData","formattedValue","color","legendData","useQuantizeColorScaleLegendData","ChoroplethTooltip","memo","_jsx","BasicTooltip","id","enableChip","propTypes","PropTypes","object","isRequired","displayName","commonPropTypes","arrayOf","shape","string","type","oneOf","properties","geometry","Object","keys","number","oneOfType","func","inheritedColorPropType","enableGraticule","bool","graticuleLineWidth","graticuleLineColor","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","any","layers","GeoMapPropTypes","role","GeoMapCanvasPropTypes","pixelRatio","commonChoroplethPropTypes","quantizeColorScalePropType","ChoroplethPropTypes","ChoroplethCanvasPropTypes","commonDefaultProps","legends","GeoMapDefaultProps","GeoMapCanvasDefaultProps","window","devicePixelRatio","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps","GeoGraticule","lineWidth","lineColor","fill","strokeWidth","stroke","GeoMapFeature","strokeLinejoin","event","GeoMap","props","partialMargin","margin","Tooltip","useDimensions","outerWidth","outerHeight","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","SvgWrapper","layer","i","Fragment","defaultProps","withContainer","getFeatureFromMouseEvent","el","getRelativeCursor","x","y","f","geoContains","invert","GeoMapCanvas","canvasEl","useRef","useEffect","current","ctx","getContext","fillStyle","background","fillRect","left","top","context","forEach","strokeStyle","beginPath","ref","style","cursor","displatName","Choropleth","legend","BoxLegendSvg","containerWidth","containerHeight","ChoroplethCanvas","renderLegendToCanvas","ResponsiveWrapper"],"mappings":"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"}